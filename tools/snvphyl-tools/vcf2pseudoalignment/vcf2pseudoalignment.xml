<tool id="vcf2pseudoalignment" name="VCF 2 pseudoalignment" version ="1.6.1-dev">
  <description>create a pseudo alignment from multiple VCFs files</description>
        <requirements>
                <requirement type="package" version="1.6-dev">snvphyl</requirement>
                <requirement type="package" version="1.2">bcftools</requirement>
        </requirements>
  <stdio>
    	<exit_code range="1:" level="fatal" description="Unknown error has occured"/>
  </stdio>  
  <command>


        #for $f in $freebayes_collection.keys#
        #set $name = str($freebayes_collection[$f]).split('/')[-1]
         ln -s $freebayes_collection[$f]  &amp;&amp; bcftools index $name  &amp;&amp;
        #end for#
        
        #for $f in $mpileup_collection.keys#
        #set $name = str($mpileup_collection[$f]).split('/')[-1]
         ln -s $mpileup_collection[$f] &amp;&amp; bcftools index $name  &amp;&amp;
        #end for#
    
        \$VCF2PSEUDO/vcf2pseudoalignment.pl
        
	-r "$reference"
	#if str($invalid) != 'None':
		--invalid-pos "$invalid"
	#end if
  	-c "$coverage"
	-f fasta
	-f phylip
	--min-mean-mapping "$mean_mapping"
	--ao "$ao"
	--numcpus \${GALAXY_SLOTS:-2}
	--fasta "$ref_fasta"

        #for $f in $freebayes_collection.keys#
        #set $beer = $freebayes_collection[$f]
        #set $path = str($beer).split('/')[-1]
        --vcfsplit "$f=$path"
        #end for#
        
        #for $f in $mpileup_collection.keys#
        #set $beer = $mpileup_collection[$f]
        #set $path = str($beer).split('/')[-1]
        --mpileup "$f=$path"
        #end for#

        #if $strain_list.select_list == "include":
              --include $strain_list.include
        #elif $strain_list.select_list == "exclude":
              --exclude $strain_list.exclude
        #end if
        
        ##mark where the output files will be sent to, simply have to match them up later in the xml output section
        -o pseudoalign
        
  </command>
  <inputs>
    <param name="reference" type="text"  label="Reference Name" value='reference' />
    <param name="ref_fasta" type="data"  label="Reference Fasta File" format="fasta"/>
    <param name="invalid" type="data"  label="Invalid position file" format="gff,bed" optional="true"/>
    <conditional name="strain_list">
      <param name="select_list" type="select" label="Strain Selecting options">
        <option value="all">Use all strains in collection</option>
        <option value="include">Provide list of subset of strains to only include</option>
        <option value="exclude">Provide list of subset of strains to exclude</option>
      </param>
      <when value="include">
        <param name="include" type="data"  label="List of strains to be include" format="text" optional="false"/>
      </when>
      <when value="exclude">
        <param name="exclude" type="data"  label="List of strains to be excluded" format="text" optional="false"/>
      </when>
       <when value="all">
      </when>
   </conditional>
    <param name="coverage" type="integer" value="15" label="minimum coverage"/>
    <param name="mean_mapping" type="integer" value="30" label="minimum mean mapping quality"/>
    <param name="ao" type="text" value="0.75" optional="false" label="Alternative allele ratio"/>
    <param name="freebayes_collection" type="data_collection" label="FreeBayes filtered BCF" help="" optional="false" format="bcf_bgzip" collection_type="list" />
    <param name="mpileup_collection" type="data_collection" label="Mpileup BCF" help="" optional="false" format="bcf_bgzip" collection_type="list" />
  </inputs>
  <outputs>
    <data format="tabular" name="positions" from_work_dir="pseudoalign-positions.tsv" />
    <data format="fasta" name="fasta" from_work_dir="pseudoalign.fasta"/>
    <data format="phylip" name="phylip" from_work_dir="pseudoalign.phy" />
    <data format="tabular" name="vcf2core" from_work_dir="pseudoalign-stats.csv" />
  </outputs>
  <tests>
    <test>
      <param name="reference" value="vcf2pseudoalignment.input.1.reference.fasta"/>
      <param name="ref_fasta" value="vcf2pseudoalignment.input.1.reference.fasta"/>
      <param name="coverage" value="4"/>
      <param name="invalid" value="vcf2pseudoalignment.input.1.invalid_positions.tsv"/>
      <param name="freebayes_collection">
        <collection type="list">
          <element name="v1" value="vcfsplit/vcf2pseudoalignment.input.1.v1.vcf.gz"/>
          <element name="v2" value="vcfsplit/vcf2pseudoalignment.input.1.v2.vcf.gz"/>
        </collection>
      </param>
      <param name="mpileup_collection">
        <collection type="list">
          <element name="v1" value="mpileup/vcf2pseudoalignment.input.1.v1.vcf.gz"/>
          <element name="v2" value="mpileup/vcf2pseudoalignment.input.1.v2.vcf.gz"/>
        </collection>
      </param>
     
      <output name="tabular" file="vcf2pseudoalignment.output.1.positions.tsv"/>
      <output name="fasta">
        <assert_contents>
          <has_text text=">vcf2pseudoalignment.input.1.reference.fasta"/>
          <has_text text="TGA"/>
          <has_text text=">v1"/>
          <has_text text="ATT"/>
          <has_text text=">v2"/>
          <has_text text="ANA"/>
        </assert_contents>
      </output>
      <output name="phylip">
        <assert_contents>
          <has_line_matching expression="vcf2pseudoalignment.input.1\S+\s+TGA"/>
          <has_line_matching expression="v1\s+ATT"/>
          <has_line_matching expression="v2\s+ANA"/>
        </assert_contents>
      </output>
    </test>
  </tests>

  <help>
Best metaalignment program ever!
  </help>
<citations>
<citation></citation>
</citations>
</tool>
